#!/usr/bin/env python
# -*- coding: utf-8 -*-
from bs4 import BeautifulSoup

#########################################
# TODO fix hosts parameter
# TODO add more info to host parameter
#########################################

class Port:

    def __init__(self, number, service, state):
        self.number = number
        self.service = service
        self.state = state

    def __str__(self):
        return "[PORT] {} => {}".format(self.number, self.service)

class Host:

    def __init__(self, ip, ports, dns_name):
        self.ip = ip
        self.ports = ports
        self.dns_name = dns_name


    def __str__(self):
        ports_str = ""

        for port in self.ports:
            ports_str += "\t{}\n".format(port)

        return "[*] {} => {}\n{}".format(self.ip, self.dns_name, ports_str)


class NmapXMLReader:

    def __init__(self, file_name):
        with open(file_name, "r") as f:
            xml_doc = f.read()

        self.soup = BeautifulSoup(xml_doc, 'html.parser')


    def extract_state_and_service(self, port):
        # Filters the services, which nmap has
        # identified on the corresponding port
        service_name = ""

        for service in port.find_all("service"):
            service_name = service.attrs["name"]

            # Changes ssl "tunneled" http to https
            if service_name == "http" and "tunnel" in service.attrs:
                if service.attrs["tunnel"] == "ssl":
                    service_name = "https"

        state_nodes = port.find_all("state")
        state_node  = state_nodes[0]
        state       = state_node["state"]
        return state, service_name


    # Filters the address per host
    def get_ipv4(self, host):
        addr = ""

        for address_node in host.find_all("address"):
            if address_node.attrs["addrtype"] == "ipv4":
                addr = address_node.attrs["addr"]

        return addr


    def read_hosts_ports(self, host):
        port_objs = []

        for port in host.find_all("port"):
            if "portid" in port.attrs:
                p                   = port.attrs["portid"]
                state, service_name = self.extract_state_and_service(port)
                port_obj            = Port(p, service_name, state)

                port_objs.append(port_obj)

        return port_objs


    def read_xml_data(self):
        host_list = []

        for host in self.soup.find_all("host"):
            addr      = self.get_ipv4(host)

            port_objs = self.read_hosts_ports(host)

            host_nodes = host.find_all("hostname")
            host_name  = ""

            if len(host_nodes) > 0:
                host_name = host_nodes[0].attrs["name"]

            host_obj = Host(addr, port_objs, host_name)

            host_list.append(host_obj)

        return host_list


### Main ###
#file_name = "/data/Engagement/teamviewer/scans/teamviewer.nmap.xml"

import argparse

parser = argparse.ArgumentParser(description="DESC")
subparsers  = parser.add_subparsers(help='commands', dest='command')
hosts       = subparsers.add_parser('hosts')
list        = subparsers.add_parser('list')

list.add_argument("-s","--service", help="Filters by service")
list.add_argument("-p","--port", help="Filters by port")
list.add_argument("-m","--mapping", action="store_true", help="Maps hostname and service/port")

hosts.add_argument("-f","--filter", help="Filters by hostname or ip, and substrings as well")

#ports.add_argument("-f", "--filter", help="Filters for a port number")
#services.add_argument("-f", "--filter", help="Filters for a service")

parser.add_argument("-x", "--xml",  help="Takes the XML Nmap file")
parser.add_argument("-a", "--argname", help="sum the integers (default: find the max)")

args = parser.parse_args()

file_name = args.xml

nxr = NmapXMLReader(file_name)
host_list = nxr.read_xml_data()

def filter_list(mapping_cond, ports_cond_str):
    if mapping_cond:
        for host in host_list:
            for port in host.ports:
                if eval(ports_cond_str):
                    print("{} {}".format(host.ip, port.number))
    else:
        for host in host_list:
            for port in host.ports:
                if eval(ports_cond_str):
                    print("{}".format(host.ip))


if args.command == "list" and args.port:
    filter_list(args.mapping, "port.number == args.port")
elif args.command == "list" and args.service:
    filter_list(args.mapping, "port.service == args.service")
elif args.command == "hosts":
    if args.filter:
        for host in host_list:
            if args.filter in host.dns_name or args.filter in host.ip:
                print(host)

else:
    for e in host_list:
        print(e)
