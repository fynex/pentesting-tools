#!/usr/bin/env python3

import argparse
import json


class Suggester:

    def __init__(self, db_path):
        self.db_path = db_path
        self.db = self.read_db()

    def read_db(self):
        with open(self.db_path, "r") as f:
            content = f.read()
            if not content:
                return {}
            return json.loads(content)

        return None

    def write_db(self):
        with open(self.db_path, "w") as f:
            f.write(json.dumps(self.db))

    def add(self, text, tag_list):
        self.db[text] = tag_list

    def search(self, keyword):
        keyword = keyword.lower()

        for text,tag_list in self.db.items():
            if keyword in tag_list or keyword in text:
                print("## Match ##")
                print(text)

    def show(self):
        for text, tag_list in self.db.items():
            print("="*60)
            print("Tags: {}".format(tag_list))
            print("Text: {}".format(text))


##############
#    Main    #
##############
parser      = argparse.ArgumentParser(description="DESC")
subparsers  = parser.add_subparsers(help='commands', dest='command')
add         = subparsers.add_parser('add')
search      = subparsers.add_parser('search')
show        = subparsers.add_parser('show')

add.add_argument("-t", "--tags", nargs="+",
                 help="Adds tags to the entered text. Tags are single words, which are separated by a space")
add.add_argument('entry', metavar='TEXT')

search.add_argument('entry', metavar='TEXT')

args = parser.parse_args()

s = Suggester("db.json")

if args.command == "add":
    tags = args.tags #.split(" ")

    if not tags:
        tags = []

    if args.entry:
        s.add(args.entry, tags)
        s.write_db()

elif args.command == "search":
    keyword = args.entry
    s.search(keyword)
elif args.command == "show":
    s.show()
else:
    print("[!] RTFM")
