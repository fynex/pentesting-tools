package main

import (
	"flag"
	"fmt"
	"github.com/Ullaakut/nmap"
	"io/ioutil"
	"os"
	"sort"
)

var VERBOSE = flag.Bool("v", false, "Shows verbose information")

func LogErr(err error) {
	if err != nil {
		fmt.Println(err)
	}
}

func getScriptOutput(scripts []nmap.Script) string {
	result := ""
	for _, script := range scripts {
		result += fmt.Sprintf("Name: %s\nOutput: %s\n", script.ID, script.Output)
		//OtherStuff: %s ---- %s, script.Elements, script.Tables
	}

	return result
}

func verbosePortInfo(port nmap.Port) {
	if *VERBOSE {
		fmt.Println("verbose: YES")
		fmt.Printf("Extra Info: %s\nScript Info: %s\n", port.Service.ExtraInfo, getScriptOutput(port.Scripts))
	}
}

func showAll(result *nmap.Run, oneLine bool) {
	for _, host := range result.Hosts {
		if len(host.Ports) == 0 || len(host.Addresses) == 0 {
			continue
		}

		hostname := ""
		if len(host.Hostnames) > 0 {
			hostname = host.Hostnames[0].String()
		}

		if oneLine {
			for _, port := range host.Ports {
				fmt.Printf("%s %d\n", host.Addresses[0], port.ID)
			}

		} else {
			fmt.Printf("Host %q (%s):\n", host.Addresses[0], hostname)

			for _, port := range host.Ports {
				fmt.Printf("\tPort %d/%s %s %s\n", port.ID, port.Protocol, port.State, port.Service.Name)
			}
		}
	}
}

func filterByServiceName(result *nmap.Run, serviceName string, oneLine bool) {
	for _, host := range result.Hosts {
		if len(host.Ports) == 0 || len(host.Addresses) == 0 {
			continue
		}

		hostname := ""
		if len(host.Hostnames) > 0 {
			hostname = host.Hostnames[0].String()
		}

		hostPrinted := false
		if oneLine {
			for _, port := range host.Ports {
				if serviceName == port.Service.Name {
					fmt.Printf("%s %d\n", host.Addresses[0], port.ID)
				}
			}
		} else {

			for _, port := range host.Ports {
				if serviceName == port.Service.Name {
					if !hostPrinted {
						fmt.Printf("Host %q (%s):\n", host.Addresses[0], hostname)
						hostPrinted = true
					}
					fmt.Printf("\tPort %d/%s %s %s\n", port.ID, port.Protocol, port.State, port.Service.Name)

					verbosePortInfo(port)

				}
			}
		}
	}
}

func filterByPort(result *nmap.Run, portNum int, oneLine bool) {
	for _, host := range result.Hosts {
		if len(host.Ports) == 0 || len(host.Addresses) == 0 {
			continue
		}

		hostname := ""
		if len(host.Hostnames) > 0 {
			hostname = host.Hostnames[0].String()
		}

		hostPrinted := false
		if oneLine {
			for _, port := range host.Ports {
				if portNum == int(port.ID) {
					fmt.Printf("%s %d\n", host.Addresses[0], port.ID)
				}
			}
		} else {
			//fmt.Printf("Host %q (%s):\n", host.Addresses[0], hostname)

			for _, port := range host.Ports {
				if portNum == int(port.ID) {
					if !hostPrinted {
						fmt.Printf("Host %q (%s):\n", host.Addresses[0], hostname)
						hostPrinted = true
					}
					fmt.Printf("\tPort %d/%s %s %s\n", port.ID, port.Protocol, port.State, port.Service.Name)

					verbosePortInfo(port)
				}
			}
		}
	}
}

func listAllServices(result *nmap.Run) map[string]bool {
	uniqueServices := map[string]bool{}

	for _, host := range result.Hosts {
		if len(host.Ports) == 0 || len(host.Addresses) == 0 {
			continue
		}

		for _, port := range host.Ports {
			service := fmt.Sprintf("%s", port.Service.Name)

			if _, ok := uniqueServices[service]; !ok {
				uniqueServices[service] = true
			}
		}
	}

	//for key, _ := range uniqueServices {
	//	fmt.Println(key)
	//}
	return uniqueServices
}

func main() {
	serviceName := flag.String("s", "", "Filters by service name")
	oneLiner := flag.Bool("1", false, "Prints out 'IP PORT'")
	portNum := flag.Int("p", -1, "Sets the port to filter for")
	listServices := flag.Bool("list-services", false, "Lists all determined services")

	flag.Parse()

	fileNames := flag.Args()

	allServices := map[string]bool{}

	for _, fileName := range fileNames {
		//fmt.Println("[*] Parsed File:", fileName)

		dat, err := ioutil.ReadFile(fileName)

		if err != nil {
			fmt.Println("[!] Unable to read file", fileName)
			fmt.Println(err)

			os.Exit(1)
		}

		result, err := nmap.Parse(dat)
		LogErr(err)

		if *serviceName != "" {
			filterByServiceName(result, *serviceName, *oneLiner)
		} else if *portNum != -1 {
			filterByPort(result, *portNum, *oneLiner)
		} else if *listServices {
			for k, v := range listAllServices(result) {
				allServices[k] = v
			}
		} else {
			showAll(result, *oneLiner)
		}

		//if !*oneLiner {
		//	fmt.Println()
		//}
	}

	if *listServices {
		serviceSlice := []string{}

		for k, _ := range allServices {
			serviceSlice = append(serviceSlice, k)
		}

		sort.Strings(serviceSlice)

		for _, service := range serviceSlice {
			fmt.Println(service)
		}
	}
}
